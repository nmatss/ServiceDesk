name: Deploy to Staging

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  ENVIRONMENT: staging

jobs:
  # Build and Push Docker Image
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=staging-
            type=raw,value=staging-latest

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-latest
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  # Deploy to Staging Environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push]
    environment:
      name: staging
      url: https://staging.servicedesk.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        if: ${{ secrets.AWS_ACCESS_KEY_ID != '' }}
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to ECS (AWS)
        if: ${{ secrets.AWS_ACCESS_KEY_ID != '' }}
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster servicedesk-staging \
            --service servicedesk-app \
            --force-new-deployment \
            --task-definition servicedesk-staging:latest

      - name: Deploy to Kubernetes
        if: ${{ secrets.KUBE_CONFIG != '' }}
        run: |
          # Setup kubectl
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=./kubeconfig

          # Update deployment
          kubectl set image deployment/servicedesk-app \
            servicedesk-app=${{ needs.build-and-push.outputs.image-tag }} \
            -n staging

          # Wait for rollout
          kubectl rollout status deployment/servicedesk-app -n staging --timeout=5m

      - name: Deploy via SSH (VPS/VM)
        if: ${{ secrets.STAGING_SSH_HOST != '' }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_SSH_HOST }}
          username: ${{ secrets.STAGING_SSH_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_SSH_PORT || 22 }}
          script: |
            cd /opt/servicedesk
            docker-compose pull
            docker-compose up -d --force-recreate
            docker system prune -f

  # Run Smoke Tests
  smoke-tests:
    name: Run Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for deployment
        run: sleep 30

      - name: Health check
        run: |
          response=$(curl -f -s -o /dev/null -w "%{http_code}" ${{ secrets.STAGING_URL }}/api/health)
          if [ $response -ne 200 ]; then
            echo "Health check failed with status: $response"
            exit 1
          fi
          echo "Health check passed: $response"

      - name: Run smoke tests
        run: |
          npx playwright test --grep @smoke
        continue-on-error: true
        env:
          PLAYWRIGHT_BASE_URL: ${{ secrets.STAGING_URL }}

      - name: API endpoint tests
        run: |
          # Test critical endpoints
          curl -f ${{ secrets.STAGING_URL }}/api/health || exit 1
          curl -f ${{ secrets.STAGING_URL }}/api/auth/status || exit 1
          echo "All endpoint tests passed"

      - name: Database connectivity test
        run: |
          # Test database connection via API
          response=$(curl -s ${{ secrets.STAGING_URL }}/api/health)
          echo $response | jq -e '.database.connected == true' || exit 1
          echo "Database connectivity verified"

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [smoke-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run k6 load test
        uses: grafana/k6-action@v0.3.1
        with:
          filename: tests/performance/load-test.js
        env:
          K6_CLOUD_TOKEN: ${{ secrets.K6_CLOUD_TOKEN }}
          BASE_URL: ${{ secrets.STAGING_URL }}

      - name: Lighthouse audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ secrets.STAGING_URL }}
            ${{ secrets.STAGING_URL }}/tickets
            ${{ secrets.STAGING_URL }}/admin
          uploadArtifacts: true

  # Rollback on Failure
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, smoke-tests]
    if: failure()
    environment:
      name: staging
    steps:
      - name: Rollback ECS deployment
        if: ${{ secrets.AWS_ACCESS_KEY_ID != '' }}
        run: |
          aws ecs update-service \
            --cluster servicedesk-staging \
            --service servicedesk-app \
            --task-definition servicedesk-staging:previous \
            --force-new-deployment

      - name: Rollback Kubernetes deployment
        if: ${{ secrets.KUBE_CONFIG != '' }}
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=./kubeconfig
          kubectl rollout undo deployment/servicedesk-app -n staging

      - name: Notify team of rollback
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "ðŸš¨ Staging deployment failed and was rolled back",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Staging Deployment Rollback*\n\nDeployment failed smoke tests and was automatically rolled back.\n\nCommit: ${{ github.sha }}\nAuthor: ${{ github.actor }}\nWorkflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Notification
  notify-success:
    name: Notify Deployment Success
    runs-on: ubuntu-latest
    needs: [deploy-staging, smoke-tests, performance-test]
    if: success()
    steps:
      - name: Notify Slack
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "âœ… Staging deployment successful",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Staging Deployment Successful*\n\nNew version deployed and all tests passed.\n\nEnvironment: staging\nCommit: ${{ github.sha }}\nAuthor: ${{ github.actor }}\nURL: ${{ secrets.STAGING_URL }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
