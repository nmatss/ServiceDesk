# ============================================
# ServiceDesk - Environment Variables Template
# ============================================
# Copy this file to .env and fill in your actual values
# NEVER commit .env to version control!

# ============================================
# CRITICAL SECURITY - REQUIRED IN PRODUCTION
# ============================================

# JWT Secret - Generate with: openssl rand -hex 32
# MUST be at least 32 characters for production
JWT_SECRET=

# Session Secret - Generate with: openssl rand -hex 32
SESSION_SECRET=

# ============================================
# DATABASE CONFIGURATION
# ============================================

# Database URL (SQLite for development, PostgreSQL for production)
# SQLite example: ./servicedesk.db
# PostgreSQL example: postgresql://user:password@localhost:5432/servicedesk
# Neon example: postgresql://user:password@ep-xxx.neon.tech/servicedesk?sslmode=require
DATABASE_URL=./servicedesk.db

# Database Pool Configuration
DB_POOL_MIN=2
DB_POOL_MAX=10
DB_POOL_IDLE_TIMEOUT=30000
DB_POOL_ACQUIRE_TIMEOUT=5000

# ============================================
# NODE ENVIRONMENT
# ============================================

# Application environment: development, staging, production
NODE_ENV=development

# Application URL
NEXT_PUBLIC_APP_URL=http://localhost:3000

# API URL (if different from app URL)
NEXT_PUBLIC_API_URL=http://localhost:3000/api

# ============================================
# AUTHENTICATION & SECURITY
# ============================================

# Enable 2FA enforcement for admin users
ENFORCE_2FA_FOR_ADMIN=false

# Password policy
MIN_PASSWORD_LENGTH=8
REQUIRE_PASSWORD_SPECIAL_CHARS=true
REQUIRE_PASSWORD_NUMBERS=true
REQUIRE_PASSWORD_UPPERCASE=true

# Session duration (in seconds)
SESSION_DURATION=28800  # 8 hours

# Refresh token duration (in days)
REFRESH_TOKEN_DURATION=7  # 7 days

# Maximum login attempts before lockout
MAX_LOGIN_ATTEMPTS=5

# Lockout duration (in minutes)
LOCKOUT_DURATION=30

# ============================================
# EMAIL CONFIGURATION (Optional)
# ============================================

# SMTP Configuration
SMTP_HOST=
SMTP_PORT=587
SMTP_SECURE=false
SMTP_USER=
SMTP_PASSWORD=
SMTP_FROM_EMAIL=noreply@yourcompany.com
SMTP_FROM_NAME=ServiceDesk

# Email service provider (smtp, sendgrid, mailgun, ses)
EMAIL_PROVIDER=smtp

# SendGrid API Key (if using SendGrid)
SENDGRID_API_KEY=

# Mailgun Configuration (if using Mailgun)
MAILGUN_API_KEY=
MAILGUN_DOMAIN=

# AWS SES Configuration (if using SES)
AWS_SES_REGION=us-east-1
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=

# ============================================
# AI / OPENAI CONFIGURATION (Optional)
# ============================================

# OpenAI API Key for AI features (ticket classification, sentiment analysis, etc.)
# Get your key at: https://platform.openai.com/api-keys
OPENAI_API_KEY=

# OpenAI Model (gpt-4o-mini, gpt-4o, gpt-4-turbo, gpt-3.5-turbo)
OPENAI_MODEL=gpt-4o-mini

# Enable AI features
ENABLE_AI_CLASSIFICATION=false
ENABLE_AI_SENTIMENT_ANALYSIS=false
ENABLE_AI_DUPLICATE_DETECTION=false
ENABLE_AI_AUTO_RESPONSE=false

# AI Temperature (0.0 - 2.0, lower = more deterministic)
AI_TEMPERATURE=0.7

# ============================================
# REDIS CONFIGURATION (Optional - Production Recommended)
# ============================================

# Redis connection (choose one method)
# Method 1: Full Redis URL
REDIS_URL=
# Method 2: Individual components
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_DB=0

# Redis Cluster (for high availability)
REDIS_CLUSTER=false

# Enable Redis caching (auto-enabled in production if Redis configured)
ENABLE_REDIS_CACHE=false

# Cache TTL Configuration
CACHE_TTL=3600  # Default: 1 hour
CACHE_TTL_SHORT=300  # 5 minutes
CACHE_TTL_MEDIUM=1800  # 30 minutes
CACHE_TTL_LONG=7200  # 2 hours
CACHE_TTL_STATIC=86400  # 24 hours

# ============================================
# STORAGE CONFIGURATION (Optional)
# ============================================

# Storage provider: local, s3, gcs, azure
STORAGE_PROVIDER=local

# Local storage path
LOCAL_STORAGE_PATH=./uploads

# AWS S3 Configuration
AWS_S3_BUCKET=
AWS_S3_REGION=us-east-1
AWS_S3_ACCESS_KEY=
AWS_S3_SECRET_KEY=

# Google Cloud Storage Configuration
GCS_BUCKET=
GCS_PROJECT_ID=
GCS_CREDENTIALS_PATH=./gcs-credentials.json

# Azure Blob Storage Configuration
AZURE_STORAGE_ACCOUNT=
AZURE_STORAGE_KEY=
AZURE_STORAGE_CONTAINER=

# Maximum file upload size (in MB)
MAX_FILE_SIZE_MB=10

# Allowed file types (comma-separated MIME types)
ALLOWED_FILE_TYPES=image/jpeg,image/png,image/gif,application/pdf,text/plain,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document

# ============================================
# SSO CONFIGURATION (Optional)
# ============================================

# Enable SSO
ENABLE_SSO=false

# Google OAuth
GOOGLE_CLIENT_ID=
GOOGLE_CLIENT_SECRET=
GOOGLE_CALLBACK_URL=http://localhost:3000/api/auth/sso/google/callback

# Microsoft Azure AD
AZURE_AD_CLIENT_ID=
AZURE_AD_CLIENT_SECRET=
AZURE_AD_TENANT_ID=
AZURE_AD_CALLBACK_URL=http://localhost:3000/api/auth/sso/azure/callback

# Okta SAML
OKTA_ISSUER=
OKTA_ENTRY_POINT=
OKTA_CALLBACK_URL=http://localhost:3000/api/auth/sso/okta/callback
OKTA_CERT=

# GitHub OAuth
GITHUB_CLIENT_ID=
GITHUB_CLIENT_SECRET=
GITHUB_CALLBACK_URL=http://localhost:3000/api/auth/sso/github/callback

# ============================================
# MONITORING & LOGGING (Optional)
# ============================================

# Logging level: error, warn, info, debug
LOG_LEVEL=info

# ============================================
# DATADOG APM & MONITORING
# ============================================

# Datadog Agent Configuration
DD_AGENT_HOST=localhost
DD_TRACE_AGENT_PORT=8126
DD_DOGSTATSD_PORT=8125

# Service Configuration
DD_SERVICE=servicedesk
DD_ENV=development
DD_VERSION=1.0.0

# Datadog API Configuration
# Get your API key at: https://app.datadoghq.com/organization-settings/api-keys
DD_API_KEY=
DD_SITE=datadoghq.com

# APM / Distributed Tracing
DD_TRACE_ENABLED=false
DD_TRACE_DEBUG=false
DD_TRACE_SAMPLE_RATE=1.0
DD_TRACE_ANALYTICS_ENABLED=true

# Logs Integration
DD_LOGS_ENABLED=false
DD_LOGS_INJECTION=true

# Profiling (CPU & Memory)
DD_PROFILING_ENABLED=false

# Real User Monitoring (RUM)
NEXT_PUBLIC_DD_RUM_ENABLED=false
NEXT_PUBLIC_DD_RUM_APPLICATION_ID=
NEXT_PUBLIC_DD_RUM_CLIENT_TOKEN=
NEXT_PUBLIC_DD_RUM_SAMPLE_RATE=100

# Custom Metrics
DD_CUSTOM_METRICS_ENABLED=false

# ============================================
# SENTRY ERROR TRACKING & SOURCE MAPS
# ============================================

# Sentry DSN for error tracking (public, safe to expose)
# Get from: https://sentry.io/settings/YOUR_ORG/projects/YOUR_PROJECT/keys/
SENTRY_DSN=

# Sentry authentication token for uploading source maps (KEEP SECRET!)
# Generate at: https://sentry.io/settings/account/api/auth-tokens/
# Required scopes: project:read, project:releases, org:read
# WARNING: Never commit this token or expose it publicly!
SENTRY_AUTH_TOKEN=

# Sentry organization slug (found in dashboard URL)
# Example: https://sentry.io/organizations/YOUR_ORG_SLUG/
SENTRY_ORG=

# Sentry project slug (found in project URL)
# Example: https://sentry.io/organizations/YOUR_ORG/projects/YOUR_PROJECT/
SENTRY_PROJECT=

# Sentry environment identifier
# Common values: production, staging, development
SENTRY_ENVIRONMENT=production

# Release identifier (auto-generated from git if not set)
# Format examples:
# - Git SHA: Use $(git rev-parse --short HEAD) in CI/CD
# - Semantic version: v1.2.3
# - Custom: production-2024-01-15
SENTRY_RELEASE=

# Sentry server URL (only needed for self-hosted Sentry)
# Leave empty for Sentry SaaS (sentry.io)
SENTRY_URL=

# Enable Sentry source map upload after build
# Set to 'true' in production, 'false' in development
SENTRY_UPLOAD_SOURCEMAPS=false

# Enable performance monitoring
ENABLE_PERFORMANCE_MONITORING=false

# Sentry traces sample rate (0.0 to 1.0)
# 1.0 = 100% of transactions, 0.1 = 10%
SENTRY_TRACES_SAMPLE_RATE=0.1

# Sentry error sample rate (0.0 to 1.0)
# 1.0 = capture all errors, 0.1 = capture 10%
SENTRY_ERROR_SAMPLE_RATE=1.0

# Google Analytics ID
GOOGLE_ANALYTICS_ID=

# PostHog API Key (product analytics)
POSTHOG_API_KEY=
POSTHOG_HOST=https://app.posthog.com

# ============================================
# RATE LIMITING
# ============================================

# Enable rate limiting
ENABLE_RATE_LIMITING=true

# General API rate limit (requests per minute)
RATE_LIMIT_API=60

# Authentication rate limit (requests per 15 minutes)
RATE_LIMIT_AUTH=5

# Public endpoints rate limit (requests per minute)
RATE_LIMIT_PUBLIC=30

# ============================================
# FEATURES FLAGS
# ============================================

# Enable knowledge base
ENABLE_KNOWLEDGE_BASE=true

# Enable analytics dashboard
ENABLE_ANALYTICS=true

# Enable automation workflows
ENABLE_WORKFLOWS=true

# Enable gamification
ENABLE_GAMIFICATION=false

# Enable PWA (Progressive Web App)
ENABLE_PWA=true

# Enable real-time notifications
ENABLE_REALTIME_NOTIFICATIONS=true

# ============================================
# MULTI-TENANCY
# ============================================

# Enable multi-tenancy
ENABLE_MULTI_TENANCY=true

# Default tenant slug (used for development)
DEFAULT_TENANT_SLUG=empresa-demo

# Allow tenant self-registration
ALLOW_TENANT_REGISTRATION=false

# ============================================
# COMPLIANCE & PRIVACY (LGPD/GDPR)
# ============================================

# Enable data retention policies
ENABLE_DATA_RETENTION=true

# Default data retention period (in days)
DATA_RETENTION_DAYS=365

# Enable audit logging
ENABLE_AUDIT_LOGS=true

# Audit log retention (in days)
AUDIT_LOG_RETENTION_DAYS=730  # 2 years

# Enable consent management
ENABLE_CONSENT_MANAGEMENT=true

# ============================================
# LOCALIZATION
# ============================================

# Default language
DEFAULT_LANGUAGE=pt-BR

# Supported languages (comma-separated)
SUPPORTED_LANGUAGES=pt-BR,en-US,es-ES

# Default timezone
DEFAULT_TIMEZONE=America/Sao_Paulo

# ============================================
# DEVELOPMENT & TESTING
# ============================================

# Enable debug mode (verbose logging)
DEBUG=false

# Enable SQL query logging
LOG_SQL_QUERIES=false

# Enable mock data seeding
ENABLE_MOCK_DATA=false

# Skip email verification in development
SKIP_EMAIL_VERIFICATION=true

# Bypass rate limiting in development
BYPASS_RATE_LIMIT=false

# ============================================
# WEBHOOKS (Optional)
# ============================================

# Webhook secret for validating incoming webhooks
WEBHOOK_SECRET=

# Enable webhook retry on failure
ENABLE_WEBHOOK_RETRY=true

# Webhook timeout (in milliseconds)
WEBHOOK_TIMEOUT=10000

# ============================================
# EXTERNAL INTEGRATIONS (Optional)
# ============================================

# Slack Integration
SLACK_WEBHOOK_URL=
SLACK_BOT_TOKEN=

# Discord Integration
DISCORD_WEBHOOK_URL=

# Jira Integration
JIRA_URL=
JIRA_USERNAME=
JIRA_API_TOKEN=

# Zendesk Integration
ZENDESK_SUBDOMAIN=
ZENDESK_EMAIL=
ZENDESK_API_TOKEN=

# ============================================
# ADVANCED CONFIGURATION
# ============================================

# Enable compression (Brotli/Gzip)
ENABLE_COMPRESSION=true

# Enable HTTP/2
ENABLE_HTTP2=false

# CORS allowed origins (comma-separated)
CORS_ORIGINS=http://localhost:3000

# Trust proxy (for production behind load balancer)
TRUST_PROXY=false

# Server port (default: 3000)
PORT=3000

# Worker threads for background jobs
WORKER_THREADS=2
