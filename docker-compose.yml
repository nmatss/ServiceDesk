version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: servicedesk-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-servicedesk}
      POSTGRES_USER: ${POSTGRES_USER:-servicedesk}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./lib/db/migrations:/docker-entrypoint-initdb.d:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-servicedesk} -d ${POSTGRES_DB:-servicedesk}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - servicedesk-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: servicedesk-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - servicedesk-network

  # ServiceDesk Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: servicedesk-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Application
      NODE_ENV: production
      PORT: 3000

      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-servicedesk}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-servicedesk}?schema=public

      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme}@redis:6379

      # Authentication
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      SESSION_SECRET: ${SESSION_SECRET:-your-super-secret-session-key-change-in-production}

      # Email (optional)
      SMTP_HOST: ${SMTP_HOST:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      SMTP_FROM: ${SMTP_FROM:-noreply@servicedesk.com}

      # Storage
      UPLOAD_MAX_SIZE: ${UPLOAD_MAX_SIZE:-10485760}
      STORAGE_PATH: /app/data/uploads

      # Monitoring
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
      LOG_LEVEL: ${LOG_LEVEL:-info}

      # Feature Flags
      ENABLE_AI_FEATURES: ${ENABLE_AI_FEATURES:-false}
      ENABLE_ANALYTICS: ${ENABLE_ANALYTICS:-true}

    volumes:
      - app_data:/app/data
      - app_uploads:/app/data/uploads
    ports:
      - "${APP_PORT:-3000}:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - servicedesk-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # NGINX Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: servicedesk-nginx
    restart: unless-stopped
    depends_on:
      - app
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - servicedesk-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: servicedesk-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alerts:/etc/prometheus/alerts:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - servicedesk-network
    profiles:
      - monitoring

  # Grafana (Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: servicedesk-grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
      GF_SERVER_ROOT_URL: ${GRAFANA_ROOT_URL:-http://localhost:3001}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboard.json:/etc/grafana/provisioning/dashboards/servicedesk.json:ro
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    networks:
      - servicedesk-network
    profiles:
      - monitoring

  # pgAdmin (Database Management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: servicedesk-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@servicedesk.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - servicedesk-network
    profiles:
      - tools

  # Datadog Agent (APM & Monitoring)
  datadog:
    image: gcr.io/datadoghq/agent:latest
    container_name: servicedesk-datadog
    restart: unless-stopped
    environment:
      # Required: Datadog API Key
      DD_API_KEY: ${DD_API_KEY:-}
      DD_SITE: ${DD_SITE:-datadoghq.com}

      # APM / Distributed Tracing
      DD_APM_ENABLED: "true"
      DD_APM_NON_LOCAL_TRAFFIC: "true"

      # Logs Collection
      DD_LOGS_ENABLED: ${DD_LOGS_ENABLED:-false}
      DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL: "true"

      # Process Monitoring
      DD_PROCESS_AGENT_ENABLED: "true"

      # Container Monitoring
      DD_CONTAINER_EXCLUDE: "name:datadog-agent"

      # Service Configuration
      DD_ENV: ${DD_ENV:-development}
      DD_SERVICE: ${DD_SERVICE:-servicedesk}
      DD_VERSION: ${DD_VERSION:-1.0.0}

      # Dogstatsd
      DD_DOGSTATSD_NON_LOCAL_TRAFFIC: "true"

      # Performance
      DD_PROFILING_ENABLED: ${DD_PROFILING_ENABLED:-false}
    volumes:
      # Docker socket for container metrics
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      # Logs
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    ports:
      # APM trace agent
      - "${DD_TRACE_AGENT_PORT:-8126}:8126/tcp"
      # DogStatsD
      - "${DD_DOGSTATSD_PORT:-8125}:8125/udp"
    networks:
      - servicedesk-network
    profiles:
      - monitoring

networks:
  servicedesk-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_data:
    driver: local
  app_uploads:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local
